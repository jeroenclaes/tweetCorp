{
    "collab_server" : "",
    "contents" : "#' Simple example function to extract data from the corpus\n#' @description There is a real risk of overflowing your computer's memory if you search for a frequent pattern in the files. If you specify an output directory, the results out kept out of memory. Linux/Mac users may want to use the command line tool 'grep' instead of this function, as it will be much faster. e.g. \\code{grep [PATTERN] corpus_directory/*csv > outputfile.csv}. Information on POS and dependency labels:http://universaldependencies.org/format.html.\n#' @param pattern word or regular expression\n#' @param corpus_directory directory where you keep the corpus file\n#' @param output_directory directory where you want the output files to go. Keep to NULL (default) if you want to collect the results in an R object rather than writing them out to files\n#' @param field one of 'tagged' or 'text'. If you want to search the parsed data, opt for 'tagged', otherwise, opt for 'text'\n#'\n#' @return Either a data.frame or nothing\n#' @export\n#'@import dplyr\n#'@import readr\n#'@import stringi\n#'@import parallel\nsearchCorpus<-function(pattern, corpus_directory, output_directory=NULL, field=c(\"tagged\", \"text\")) {\n\n  field<-match.arg(field)\n\n  #Options\n  options(mc.cores=detectCores(), stringsAsFactors = F)\n\n  #Logic\n  search<-parallel::mclapply(list.files(corpus_directory, \".csv\"), FUN=function(x) {\n   file<- readr::read_csv(paste0(corpus_directory,\"/\", x), col_types = cols(\n      created_at = col_character(),\n      id_str = col_double(),\n      name = col_character(),\n      screen_name = col_character(),\n      location = col_character(),\n      full_name = col_character(),\n      lon = col_double(),\n      lat = col_double(),\n      place_lon = col_double(),\n      place_lat = col_double(),\n      text = col_character(),\n      tagged = col_character()\n    ))\n\n   if(field==\"tagged\") {\n     file<-file %>%\n       filter(grepl(pattern, tagged, perl=T))\n\n   }else {\n     file<-file %>%\n       filter(grepl(pattern, text, perl=T))\n   }\n\n    if(!is.null(output_directory)) {\n      readr::write_csv(file, paste0(output_directory,\"/\", x))\n     return(NULL)\n   } else {\n     return(file)\n   }\n\n  })\n\n  #Output\n  if(!is.null(output_directory)) {\n    return(paste(\"Searched corpus field\", shQuote(field), \"of the corpus files in directory\", shQuote(corpus_directory), \"and written output to\", shQuote(output_directory)))\n  } else {\n    return(bind_rows(search))\n  }\n\n}\n",
    "created" : 1505375506912.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2217501621",
    "id" : "381D5E78",
    "lastKnownWriteTime" : 1505383273,
    "last_content_update" : 1505383273189,
    "path" : "~/Desktop/tweetCorp/R/searchCorpus.R",
    "project_path" : "R/searchCorpus.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}