{
    "collab_server" : "",
    "contents" : "#' \\code{syntaxNetR} a basic R binding for Google SyntaxNet Parsey Universal\n#' @description Basic R binding to use an adapted version of the example python code provided by Google to tag R character vectors. You will need a Mac/Linux computer with an installation of syntaxNet to use this function. Follow the steps described here:https://github.com/tensorflow/models/tree/master/syntaxnet.\n#' @param tokenVector a character vector formatted in UTF-8 or ASCII. It will almost certainly not work with windows/ISO 8591-1/latin1 encoding.\n#' @param syntaxNetPath path to your local syntaxNet installation, with trailing slashes (i.e., the path has to end with a forward slash)\n#' @param language name of the language  model provided by Google, must be one of pre-set options\n#' @param SIMPLIFY if set to TRUE (default), the function will simplify the list output to text with slashtags (e.g., _noun_sg_nsubj)\n#' @param verbose if set to TRUE (default) the function will output log messages allowing you to track its progress\n#'\n#' @return a parsed character vector (if SIMPLIFY is set to TRUE) or a list representation of the parsed character vector\n#' @export\n#' @import rPython\n#' @import rjson\n#' @import stringi\n#' @import dplyr\n#' @import parallel\n\nsyntaxNetR<-function(tokenVector, syntaxNetPath=NULL, language=c(\"Ancient_Greek-PROIEL\",\"Ancient_Greek\",\"Arabic\",\"Basque\",\"Bulgarian\",\"Catalan\",\"Chinese\",\"Croatian\",\"Czech-CAC\",\"Czech-CLTT\",\"Czech\",\"Danish\",\"Dutch-LassySmall\",\"Dutch\",\"English-LinES\",\"English\",\"Estonian\",\"Finnish-FTB\",\"Finnish\",\"French\",\"Galician\",\"German\",\"Gothic\",\"Greek\",\"Hebrew\",\"Hindi\",\"Hungarian\",\"Indonesian\",\"Irish\",\"Italian\",\"Kazakh\",\"Latin-ITTB\",\"Latin-PROIEL\",\"Latin\",\"Latvian\",\"Norwegian\",\"Old_Church_Slavonic\",\"Persian\",\"Polish\",\"Portuguese-BR\",\"Portuguese\",\"Romanian\",\"Russian-SynTagRus\",\"Russian\",\"Slovenian-SST\",\"Slovenian\",\"Spanish-AnCora\",\"Spanish\",\"Swedish-LinES\",\"Swedish\",\"Tamil\",\"Turkish\"), SIMPLIFY=TRUE,  verbose=TRUE) {\n  language<-match.arg(language)\n  if(is.null(syntaxNetPath)) {\n    stop(\"Provide the path to your syntaxNet installation.\")\n  }\n\n  options(mc.cores=detectCores(), stringsAsFactors = F)\n  logmessage(\"Preprocessing data\", verbose)\n  tokenVector<- stringi::stri_replace_all_regex(tokenVector, \"(https:\\\\/\\\\/t.co\\\\/)([a-z0-9A-Z]+)\", \"\")\n  tokenVector<- stringi::stri_replace_all_regex(tokenVector, \"^ $\", \"FILLER_LINE_REMOVE_ME\")\n\n logmessage(\"Writing vector\", verbose)\n\n  cat(tokenVector, file=paste0(getwd(), \"/vector.txt\"), sep=\"\\n\")\n  rPython::python.load(system.file(package = \"tweetCorp\", paste(\"inst/parserJC.py\", syntaxNetPath)))\n\n  logmessage(\"Parsing\", verbose)\n\n  parseMe<- rPython::python.call(\"parseVector\", language, paste0(getwd(), \"/vector.txt\"), paste0(getwd(), \"/output.json\"))\n\n  if(parseMe==\"done\") {\n\n    print(logmessage(\"Reading parsed file\"))\n    parse<- rjson::fromJSON(readLines(paste0(getwd(), \"/output.json\")))\n    file.remove(paste0(getwd(), \"/vector.txt\"))\n    file.remove(paste0(getwd(), \"/output.json\"))\n\n    if(!isTRUE(SIMPLIFY)) {\n      return(parse)\n    } else {\n\n     logmessage(\"Decoding parse\", verbose)\n      result<-unlist(parallel::mclapply(parse, FUN=function(sentences) {\n        words<- sapply(sentences[[1]], FUN=function(records) {\n          res <-paste(records$form,\n                      records$upostag,\n                      paste(records$feats[!names(records$feats) %in% c(\"fPOS\")], collapse = \"_\"),\n                      records$deprel,\n                      sep = \"_\")\n          return(res)\n        })\n\n        return(stringi::stri_replace_all_regex(paste(words, collapse=\" \"), \"[:punct:]_\", \"_\"))\n\n      }))\n     logmessage(\"All done\", verbose)\n\n      return(stringi::stri_trans_tolower(result))\n\n    }\n  } else {\n    stop(\"Python hangs, sorry man.\")\n\n  }\n\n}\n",
    "created" : 1505376070694.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "790055630",
    "id" : "283232A4",
    "lastKnownWriteTime" : 1505383268,
    "last_content_update" : 1505383268533,
    "path" : "~/Desktop/tweetCorp/R/syntaxNetR.R",
    "project_path" : "R/syntaxNetR.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}