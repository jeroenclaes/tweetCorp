{
    "collab_server" : "",
    "contents" : "#' Function to enrich a filtered corpus with Twitter users' most likely age and gender, based on baby names statistics\n#'@description This function crossreferences the 'name' field in the corpus files with a large database of baby names statistics, drawn from two sources: United States Social Security (included in the R package 'babynames' by Hadley Wickham) and the Spanish Instituto Nacional de Estadisticas (INE). The function implements a cascade system, attempting first to find exact matches, after which it results to approximate string matching using Levenhstein distance.\n#' @param filteredCorpus filtered corpus. Do not use on unfiltered data if you want to get results in this century.\n#' @param maxDistance maximum Levenhstein distance to use for approximate string matching. Defaults to 2\n#' @param nthreads number of threads to use in the C++ code for approximate string matching. Defaults to the number of CPU cores on your machine and it's probably a good idea to use that default.\n#' @return a data.frame with the two added columns: gender (column 'sex') and most likely year of birth (column 'year')\n#' @export\n#' @import Rcpp\n#' @import RcppProgress\n#' @import readr\n#' @import dplyr\n#' @import parallel\n#' @import stringi\n\naddAgeGender<-function(filteredCorpus, language=c(\"English\", \"Spanish\"), maxDistance=2, nthreads=parallel::detectCores()) {\n  language<-match.arg(language)\n  database<-switch(language, English=english_baby_names, Spanish=spanish_baby_names)\n\n  filtered_corpus <- filtered_corpus %>%\n    mutate(name=sapply(name, FUN=function(x) stri_split_boundaries(stri_trim(x))[[1]][1]))\n\n  exactMatches<-filtered_corpus %>%\n    left_join(database, by=\"name\")\n\n\n  toBeCompleted<- exactMatches %>%\n    filter(is.na(year)) %>%\n    select(-year, -sex)\n\n  key<-data.frame(name=unique(toBeCompleted$name), output=fuzzyMatch(unique(toBeCompleted$name), database$name, maxDistance = maxDistance, nthreads = nthreads))\n\n  toBeCompleted<-toBeCompleted %>%\n    left_join(key, by=\"name\") %>%\n    select(-name) %>%\n    rename(output=full_name) %>%\n    left_join(database)\n\n  exactMatches<-exactMatches %>%\n    filter(!is.na(year))\n  done<-  dplyr::bind_rows(toBeCompleted, exactMatches)\n\n  return(done)\n\n}\n",
    "created" : 1505379419315.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3712747753",
    "id" : "60561018",
    "lastKnownWriteTime" : 1505383311,
    "last_content_update" : 1505383311807,
    "path" : "~/Desktop/tweetCorp/R/addAgeGender.R",
    "project_path" : "R/addAgeGender.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}